from .. import 缓存
from .  import Table索引
from .  import Table显示算法

# 专门处理 table_yview() 和 ybar_set() 逻辑


itemframe = None
frametable = None


数据列表 = []
单区大小 = 10240 # 
def 数据列表处理():
    global 数据列表, 单区大小
    单区大小 = int(itemframe.单区大小.get())
    数据列表 = []
    数据列表 = 缓存.选择集列表
    # itemframe.数据列表["values"] = 数据列表


格式列表 = []
第1行列数 = 0
第n行列数 = 0
def 格式文本处理():
    global 格式文本, 格式列表, 第1行列数, 第n行列数
    格式列表 = []
    格式文本 = itemframe.解析格式.get()
    格式列表 = 格式文本.split("+")
    第1行列数 = int(itemframe.第1行列数.get())
    第n行列数 = int(itemframe.第n行列数.get())

倍数列表 = []
单元格字节数 = 1
def 建立倍数列表():
    global 单元格字节数, 倍数列表
    单元格字节数 = 1
    for format in 格式列表:
        if 缓存.格式步长字典[format] > 单元格字节数: 单元格字节数 = 缓存.格式步长字典[format]

    倍数列表 = []
    for format in 格式列表:
        倍数 = 单元格字节数 // 缓存.格式步长字典[format]
        倍数列表.append(倍数)


有效行数 = 128
分段列表 = []
def 建立分段列表():
    global 有效行数, 分段列表

    数据块大小最大值 = 0
    for bp in 数据列表:
        if bp.size() > 数据块大小最大值: 数据块大小最大值 = bp.size()
    
    分段列表 = []

    分段数量 = 数据块大小最大值 // 单区大小
    单区行数 = 单区大小 // (第n行列数*单元格字节数)
    if 单区大小 % (第n行列数*单元格字节数) > 0: 单区行数 += 1
    列数列表 = [第n行列数 for i in range(单区行数)]
    for i in range(分段数量): 分段列表.append(列数列表[:])

    余数 = 数据块大小最大值 % 单区大小
    if 余数 > 0: 
        单区行数 = 余数 // (第n行列数*单元格字节数)
        if 余数 % (第n行列数*单元格字节数) > 0: 单区行数 += 1
        列数列表 = [第n行列数 for i in range(单区行数)]
        分段列表.append(列数列表[:])

    for i in range(第1行列数//第n行列数): 分段列表[0].pop()
    分段列表[0].append(第n行列数) # 本质上 第1行列数 比 第n行列数 小，所以需要补1行，防止丢失字节
    分段列表[0][0] = 第1行列数

    有效行数 = int(itemframe.有效行数.get())
    Table索引.有效行数 = 有效行数
    Table索引.分段列表 = 分段列表


def 刷新显示():
    列表索引, 列数索引 = 0, 0
    Table索引.列表索引, Table索引.列数索引 = 0, 0
    数据列表处理()
    # if 数据列表 == []: return ""
    格式文本处理()
    建立倍数列表()
    建立分段列表()

    范围列数列表 = 分段列表[0][0: 0+有效行数]
    字节偏移值 = 0 + int(itemframe.偏移大小.get())
    Table显示算法.生成数据显示列表(数据列表, 格式列表, 字节偏移值, 单元格字节数, 倍数列表, 范围列数列表)
    Table显示算法.计算列数最大值与重设列(frametable, 范围列数列表, 格式列表, 缓存.格式宽度字典)
    Table显示算法.表格显示刷新处理(frametable)
    Table显示算法.表格左侧栏显示处理(frametable, 数据列表, 格式列表)



def 计算前置偏移(列表索引, 列数索引):
    分段偏移值 = 0
    for 列数列表 in 分段列表[0: 列表索引]:
        for 列数 in 列数列表[0:列数索引]:
            分段偏移值 += 列数*单元格字节数

    列段偏移值 = 0
    列数列表 = 分段列表[列表索引]
    for 列数 in 列数列表[0:列数索引]:
        列段偏移值 += 列数*单元格字节数
    return 分段偏移值 + 列段偏移值


def 简化前置偏移(列表索引, 列数索引):
    分段偏移值 = 单区大小 * 列表索引

    列段偏移值 = 0
    for 列数 in 分段列表[列表索引][0:列数索引]:
        列段偏移值 += 列数*单元格字节数
    if 列段偏移值 > 单区大小: 列段偏移值 = 单区大小
    return 分段偏移值 + 列段偏移值


def 回车分行_列数列表操作(index, column):
    列表索引, 列数索引 = Table索引.列表索引, Table索引.列数索引
    列数列表 = 分段列表[列表索引]
    点击索引 = round(index/(len(数据列表)*len(格式列表)))
    当前索引 = 列数索引 + 点击索引

    当前列数 = 列数列表[当前索引]
    if 当前索引+1 >= len(列数列表): 列数列表.append(16)
    下行列数 = 列数列表[当前索引+1]

    if column == "#0" or column == "":
        列数列表[当前索引] = 当前列数 + 下行列数
        列数列表.pop(当前索引+1)
    else:
        数值 = int(column[1:])-1
        列数列表[当前索引] = 数值
        列数列表.insert(当前索引+1, 当前列数-数值)


def 回车换行_列数列表操作(index, column):
    列表索引, 列数索引 = Table索引.列表索引, Table索引.列数索引
    列数列表 = 分段列表[列表索引]
    点击索引 = round(index/(len(数据列表)*len(格式列表)))
    当前索引 = 列数索引 + 点击索引

    当前列数 = 列数列表[当前索引]
    if 当前索引+1 >= len(列数列表): 列数列表.append(16)
    下行列数 = 列数列表[当前索引+1]

    if column == "#0" or column == "":
        列数列表[当前索引] = 当前列数 + 下行列数
        列数列表.pop(当前索引+1)
    else:
        数值 = int(column[1:])-1
        列数列表[当前索引] = 数值
        列数列表[当前索引+1] = 下行列数 + 当前列数 - 数值


def 回车末行_列数列表操作(index, column):
    列表索引, 列数索引 = Table索引.列表索引, Table索引.列数索引
    列数列表 = 分段列表[列表索引]
    点击索引 = round(index/(len(数据列表)*len(格式列表)))
    当前索引 = 列数索引 + 点击索引

    当前列数 = 列数列表[当前索引]
    if 当前索引+1 >= len(列数列表): 列数列表.append(16)
    下行列数 = 列数列表[当前索引+1]
    末行列数 = 列数列表[-1]
    
    if column == "#0" or column == "":
        列数列表[当前索引] = 当前列数 + 下行列数
        列数列表.pop(当前索引+1)
    else:
        数值 = int(column[1:])-1
        余数 = 当前列数 - 数值
        列数列表[当前索引] = 数值
        列数列表[-1] = 列数列表[-1] + 余数
        if  末行列数 + 余数 > 16:
            列数列表[-1] = 16
            列数列表.append(末行列数+余数-16)
        
        # 列数列表[当前索引+1] = 下行列数 + 当前列数 - 数值
        # 列数列表.insert(当前索引+1, 当前列数-数值)



def 回车显示():
    列表索引, 列数索引 = Table索引.列表索引, Table索引.列数索引
    前置偏移值 = 简化前置偏移(列表索引, 列数索引)
    固定偏移值 = int(itemframe.偏移大小.get())
    字节偏移值 = 前置偏移值 + 固定偏移值
    范围列数列表 = 分段列表[列表索引][列数索引: 列数索引+有效行数]
    Table显示算法.生成数据显示列表(数据列表, 格式列表, 字节偏移值, 单元格字节数, 倍数列表, 范围列数列表)
    Table显示算法.计算列数最大值与重设列(frametable, 范围列数列表, 格式列表, 缓存.格式宽度字典)
    Table显示算法.表格显示刷新处理(frametable)
    Table显示算法.表格左侧栏显示处理(frametable, 数据列表, 格式列表)




def 拖动显示():
    pass














