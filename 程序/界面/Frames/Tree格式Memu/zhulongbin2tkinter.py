import tkinter as tk


from . import bsfunction as bs
import 程序.文件.bpformat.byfunction as by
func = by

import 程序.文件 as 文件

class 类:
    def __init__(self, frametree, 菜单):
        self.frametree = frametree
        子菜单 = tk.Menu(菜单, tearoff=False)
        菜单.add_cascade(label = "古剑3b/jsonbin", menu=子菜单)
        子菜单.add_command(label="文件解析", command=self.文件解析)        
        子菜单.add_command(label="文件分块", command=self.文件分块)
        子菜单.add_command(label="find11", command=self.find11)
        子菜单.add_command(label="find826978", command=self.find826978)
        # 子菜单.add_command(label="PK分块", command=self.PK分块)


        # 子菜单.add_command(label="dataposition", command=self.dataposition)
        # 子菜单.add_separator() # 添加分割线




    def context(self, item=""):
        if item == "": item = self.frametree.tree.selection()[0]
        bs.bscontext.frametree = self.frametree
        bs.bscontext.item = item
        global by
        by = func.context(self.frametree.bpdict[item].copy()) # bp = self.frametree.bpdict[item]
        return item
    


    def 文件解析(self):
        for item in self.frametree.tree.selection():
            self.context(item)
            bp = by.filepath(by.rdpath()).bp
            jsonbinfile = 文件.jsonbin.类(bp)

            string列表 = []
            for datatype, result in jsonbinfile.type_result_list:
                if datatype == 8: string列表.append(result)

            # avatar列表, name列表 = [], []
            # for i, string in enumerate(string列表):
            #     if string == "model_id": avatar列表.append(string列表[i+1])
            #     if string == "avatar": avatar列表.append(string列表[i+1])
            #     if string == "templ_model_id": avatar列表.append(string列表[i+1])
            #     if string ==   "name":   name列表.append(string列表[i+1])

            # f = open("name.txt", "w", encoding="UTF-8")
            # for avatar, name in zip(avatar列表, name列表):
            #     f.write(f"\"{avatar}.avatar\": \"{name}\", \n")
            # f.close()
            # print("文件写入完成")
            f = open("name.txt", "w", encoding="UTF-8")
            for i, string in enumerate(string列表):
                if string == "model_id": f.write(f"model_id: \"{string列表[i+1]}.avatar\", \n")
                if string == "avatar": f.write(f"avatar: \"{string列表[i+1]}.avatar\", \n")
                if string == "templ_model_id": f.write(f"templ_model_id: \"{string列表[i+1]}.avatar\", \n")
                if string ==   "name":   f.write(f"name: \"{string列表[i+1]}\", \n")
            f.close()
            print("文件写入完成")




    def 文件分块(self):pass

    def 文件分块1(self):
        sizes = [53, 586092, 290803, 664, 9752702, 675552, 332624, 11468, 5746, 1568567, 1376200, 506229, 1772625, 71360, 1291392, 34498, 30308, 3489, 903608, 117974, 54102, 23336, 49314, 1192, 612, 2190606, 1094259, 6076, 46247, 244088, 141551, 5460251, 2741202, 90899, 202179, 590519, 285258, 12234, 6135, 114613, 57284, 231938, 116052, 76, 58494, 50433, 99032, 37731, 37306, 80626, 91909, 128225, 930399, 32248, 16070, 32072, 15040, 119778, 341503, 249694, 494385, 2983, 22782, 21476, 2390636, 31, 25, 30, 25, 27, 25, 30, 25, 27, 25, 31, 25, 27, 25, 26, 25, 26, 25, 31, 25, 26, 25, 44, 31, 27, 25, 28, 25, 40, 31, 26, 25, 27, 25, 40, 31, 28, 25, 28, 25, 28, 25, 29, 25, 29, 25, 29, 25, 30, 25, 35, 31, 27, 25, 31, 25, 30, 25, 31, 25, 27, 25, 28, 25, 28, 25, 29, 26, 27, 26, 34, 32, 37, 32, 27, 26, 29, 26, 34, 26, 36, 26, 31, 26, 27, 26, 33, 26, 36, 26, 30, 26, 28, 26, 27, 26, 26, 26, 35, 29, 35, 26, 35, 26, 27, 26, 31, 26, 36, 26, 33, 26, 34, 26, 29, 26, 43, 29, 36, 29, 26, 26, 26, 26, 28, 26, 29, 26, 32, 26, 28, 26, 36, 26, 35, 29, 34, 26, 35, 26, 35, 26, 33, 26, 40, 29, 36, 29, 36, 26, 31, 26, 33, 26, 35, 26, 34, 26, 35, 29, 37, 26, 32, 26, 33, 26, 29, 26, 28, 26, 46, 29, 46, 29, 44, 29, 26, 26, 27, 26, 32, 26, 29, 26, 44, 32, 43, 29, 28, 26, 28, 26, 33, 26, 33, 26, 30, 26, 29, 26, 37, 26, 39, 29, 31, 26, 28, 26, 36, 26, 29, 26, 36, 26, 37, 26, 41, 29, 28, 26, 38, 29, 29, 26, 33, 26, 41, 29, 28, 26, 37, 32, 39, 29, 42, 32, 41, 29, 37, 29, 26, 26, 31, 26, 35, 26, 33, 26, 37, 29, 31, 26, 39, 26, 38, 26, 29, 26, 33, 26, 41, 29, 29, 26, 29, 26, 33, 26, 36, 26, 43, 29, 33, 26, 34, 26, 33, 26, 44, 29, 32, 26, 27, 26, 35, 29, 48, 32, 42, 32, 32, 26, 28, 26, 34, 26, 31, 26, 31, 26, 48, 32, 43, 29, 29, 26, 36, 29, 32, 26, 31, 26, 33, 26, 27, 26, 31, 26, 26, 26, 37, 29, 30, 26, 30, 26, 39, 28, 29, 25, 30, 25, 31, 25, 29, 7350, 208768, 104669, 8497, 4263, 1724, 916, 12006, 13938, 58482, 29401, 2080, 47051, 28, 33, 49, 45, 37, 39, 43, 45, 40, 42, 49, 45, 40, 39, 45, 45, 45, 45, 37, 39, 48, 51, 27, 33, 49, 44, 36, 39, 48, 39, 52, 45, 54, 42, 34, 36, 46, 42, 51, 45, 42, 39, 47, 42, 43, 42, 47, 42, 41, 42, 41, 42, 101, 71, 44, 39, 30, 33, 51, 45, 37, 36, 37, 36, 38, 36, 38, 36, 38, 36, 42, 39, 40, 39, 40, 39, 40, 39, 42, 39, 43, 39, 38, 39, 41, 39, 36, 39, 50, 39, 171, 102, 47, 42, 40, 39, 38, 39, 384, 211, 42, 39, 68, 54, 38, 36, 28, 33, 31, 33, 35, 39, 27, 30, 29, 30, 63, 54, 27, 30, 37, 39, 35, 39, 37, 39, 57, 39, 130, 79, 112, 72, 41, 33, 28, 33, 79, 53, 46, 39, 59, 44, 66, 48, 27, 33, 28, 33, 215, 130, 256, 133, 45, 39, 38, 39, 39, 39, 45, 39, 37, 39, 33, 36, 89, 57, 37, 33, 40, 36, 40, 36, 40, 36, 40, 36, 29, 33, 27, 33, 44, 42, 44, 42, 44, 42, 44, 42, 42, 39, 36, 39, 37, 39, 365, 189, 38, 39, 40, 42, 34, 36, 31, 33, 27, 33, 36, 36, 30, 33, 39, 36, 35, 39, 42, 39, 36, 39, 21, 30, 21, 30, 21, 30, 21, 30, 38, 39, 43, 42, 76, 62, 33, 39, 35, 33, 33, 39, 107, 60, 40, 45, 39, 39, 38, 39, 48, 45, 41, 39, 36, 39, 36, 39, 34, 39, 28, 30, 51, 42, 38, 39, 33, 39, 31, 33, 37, 39, 33, 39, 22, 30, 26, 33, 26, 33, 26, 33, 29, 36, 42, 33, 23, 30, 34, 39, 41, 39, 27, 33, 40, 39, 48, 42, 26, 33, 41, 39, 40, 39, 26, 33, 33, 39, 34, 39, 49, 39, 37, 39, 42, 39, 48, 39, 44, 39, 52, 45, 28, 36, 45, 45, 34, 39, 33, 39, 34, 36, 34, 39, 50, 45, 40, 39, 44, 36, 39, 39, 50, 45, 33, 39, 34, 39, 33, 39, 49, 45, 32, 27, 41, 39, 33, 33, 35, 33, 34, 33, 36, 36, 29, 33, 28, 33, 32, 33, 31, 33, 27, 33, 35, 36, 28, 33, 29, 33, 32, 33, 33, 33, 31, 33, 32, 36, 33, 36, 34, 36, 26, 30, 24, 30, 27, 30, 26, 30, 26, 30, 27, 30, 41, 39, 35, 42, 38, 39, 33, 36, 47, 45, 25, 31, 45, 42, 74, 66, 37, 39, 37, 39, 55, 44, 38, 39, 57, 48, 35, 36, 49, 42, 36, 36, 34, 36, 36, 36, 35, 36, 50, 48, 30, 33, 46, 39, 32, 36, 30, 36, 42, 39, 42, 39, 41, 39, 50, 45, 70, 52, 27, 31, 27, 31, 27, 31, 27, 33, 31, 33, 28, 33, 29, 33, 28, 33, 27, 33, 27, 33, 30, 33, 30, 33, 32, 33, 34, 39, 33, 39, 51, 45, 40, 39, 63, 54, 66, 54, 48, 39, 34, 39, 45, 39, 27, 34, 28, 34, 33, 39, 46, 45, 44, 45, 39, 39, 29, 33, 26, 33, 28, 33, 33, 33, 28, 33, 35, 33, 43, 39, 47, 39, 40, 39, 39, 39, 35, 36, 34, 36, 43, 39, 34, 33, 46, 39, 46, 39, 48, 39, 44, 39, 41, 39, 120, 78, 34, 36, 46, 39, 42, 39, 36, 36, 33, 33, 34, 36, 29, 33, 36, 36, 44, 39, 35, 36, 37, 36, 24, 30, 25, 30, 23, 30, 26, 30, 29, 33, 32, 33, 36, 34, 36, 34, 36, 34, 39, 39, 43, 39, 34, 39, 46, 45, 44, 45, 39, 39, 35, 36, 25, 33, 34, 36, 54, 48, 56, 48, 31, 33, 42, 39, 32, 33, 29, 33, 27, 33, 27, 33, 30, 36, 31, 36, 21, 30, 25, 33, 29, 36, 33, 39, 37, 42, 29, 33, 31, 33, 34, 33, 29, 33, 28, 33, 45, 39, 36, 36, 40, 39, 47, 39, 49, 39, 34, 33, 34, 36, 40, 42, 44, 39, 42, 39, 44, 39, 71, 49, 71, 49, 66, 45, 64, 45, 49, 39, 52, 44, 52, 44, 41, 39, 37, 36, 35, 33, 34, 33, 35, 33, 113, 68, 154, 89, 94, 57, 24, 33, 103, 65, 63, 45, 117, 71, 68, 51, 21, 27, 28, 33, 26, 33, 34, 33, 28, 33, 38, 39, 35, 39, 32, 36, 197, 127, 31, 39, 32, 39, 24, 30, 23, 30, 30, 33, 33, 39, 33, 39, 50, 52, 41, 39, 38, 39, 44, 45, 44, 45, 30, 33, 31, 33, 62, 52, 52, 45, 50, 45, 48, 45, 41, 37, 40, 39, 35, 39, 33, 33, 37, 36, 32, 36, 32, 36, 36, 36, 37, 36, 38, 36, 34, 36, 62, 50, 62, 50, 22, 30, 66, 49, 33, 34, 35, 36, 29, 33, 40, 39, 40, 39, 42, 39, 42, 42, 40, 39, 32, 33, 53, 45, 47, 45, 56, 48, 41, 36, 41, 39, 21, 30, 57, 49, 33, 36, 33, 36, 33, 36, 33, 36, 36, 39, 46, 45, 29, 33, 25, 30, 27, 33, 33, 36, 27, 33, 33, 39, 43, 42, 42, 42, 27, 33, 54, 48, 30, 36, 28, 34, 73, 54, 86, 57, 86, 57, 66, 54, 32, 36, 31, 36, 31, 36, 33, 33, 45, 39, 30, 33, 33, 33, 42, 42, 39, 39, 33, 33, 32, 36, 30, 36, 33, 39, 35, 39, 50, 42, 46, 42, 33, 36, 36, 39, 46, 45, 47, 45, 33, 36, 37, 36, 27, 33, 30, 33, 33, 33, 31, 33, 22, 30, 29, 30, 133, 81, 21, 30, 21, 30, 34, 36, 33, 39, 29, 33, 65, 51, 36, 33, 38, 33, 38, 33, 31, 33, 46, 42, 22, 30, 22, 30, 22, 30, 22, 30, 42, 39, 39, 39, 57, 51, 57, 51, 42, 39, 29, 33, 34, 39, 66, 51, 44, 39, 33, 39, 42, 42, 28, 33, 28, 33, 28, 33, 21, 29, 21, 29, 21, 29, 24, 30, 33, 39, 28, 33, 29, 33, 27, 33, 38, 36, 38, 36, 29, 33, 29, 33, 28, 33, 31, 33, 33, 36, 33, 36, 33, 36, 40, 39, 44, 45, 39, 42, 35, 36, 30, 33, 32, 27, 26, 27, 26, 27, 29, 27, 47, 48, 45, 42, 41, 42, 60, 51, 35, 36, 40, 42, 29, 33, 29, 33, 30, 33, 29, 33, 42, 39, 42, 39, 43, 39, 46, 39, 56, 48, 54, 48, 34, 36, 40, 39, 28, 33, 27, 34, 34, 36, 35, 35, 51, 48, 53, 45, 49, 39, 37, 39, 44, 45, 57, 48, 73, 63, 50, 39, 29, 34, 28, 34, 29, 34, 51, 42, 49, 39, 69, 63, 28, 34, 57, 45, 47, 45, 45, 45, 65, 51, 48, 39, 59, 51, 36, 36, 96, 92, 34, 36, 30, 36, 42, 42, 63, 54, 84, 66, 29, 33, 29, 33, 30, 33, 49, 45, 39, 36, 31, 36, 30, 36, 31, 36, 30, 36, 31, 36, 28, 33, 32, 33, 32, 33, 34, 33, 34, 33, 40, 39, 40, 39, 41, 39, 21, 30, 25, 30, 25, 30, 43, 39, 38, 39, 57, 51, 40, 39, 40, 39, 38, 39, 39, 39, 36, 39, 33, 36, 33, 36, 36, 36, 23, 30, 22, 30, 26, 34, 30, 34, 24, 30, 25, 30, 31, 34, 29, 34, 24, 30, 28, 33, 27, 30, 27, 30, 33, 33, 32, 33, 30, 34, 30, 34, 30, 33, 30, 33, 27, 33, 28, 33, 23, 30, 26, 33, 33, 39, 20, 29, 41, 42, 31, 34, 37, 39, 28, 33, 28, 33, 42, 41, 25, 64330, 32664, 15668, 1252640, 622889, 33330, 16724, 92, 57, 77, 54, 103, 57, 70, 53, 48, 44, 68, 52, 64, 52, 67, 50, 63, 50, 79, 58, 75, 58, 43, 40, 41, 40, 50, 42, 49, 42, 50, 42, 49, 42, 93, 65, 125, 74, 129, 74, 129, 74, 136, 74, 612, 318, 592, 308, 420, 224, 410, 219, 199, 119, 199, 119, 42, 39, 52, 44, 70, 53, 83, 62, 73, 53, 69, 53, 70, 53, 50, 44, 205, 115, 351, 187, 90, 60, 103, 63, 132, 69, 48, 45, 132, 69, 48, 42, 43, 39, 44, 41, 45, 39, 57, 45, 46, 39, 53, 45, 59, 45, 206, 121, 48, 42, 48, 39, 45, 42, 193, 115, 339, 187, 203, 119, 204, 121, 196, 110, 206, 115, 98, 63, 42, 39, 32, 35, 31, 33, 42, 39, 47, 39, 43, 39, 44, 39, 44, 39, 53, 45, 45, 39, 45, 39, 40, 39, 42, 39, 45, 39, 48, 42, 42, 40, 46, 43, 50, 46, 54, 49, 58, 52, 35, 36, 117, 85, 98, 64, 45, 42, 208, 110, 61, 49, 80, 56, 48, 45, 38, 39, 33, 42, 33, 33, 32, 33, 27, 33, 29, 33, 32, 33, 35, 36, 105, 71, 37, 39, 37, 39, 62, 45, 34, 38, 105, 71, 29, 34, 33, 34, 29, 34, 32, 34, 36, 34, 37, 34, 33, 34, 28, 34, 28, 34, 28, 34, 93, 63, 53, 45, 71, 51, 104, 66, 55, 45, 68, 45, 82, 51, 107, 72, 72, 54, 89, 60, 53, 42, 49, 42, 123, 75, 48, 42, 40, 36, 41, 36, 41, 36, 40, 39, 81, 54, 33, 36, 236, 124, 87, 63, 47, 38, 49, 42, 113, 66, 81, 54, 263, 128, 265, 132, 28, 33, 141, 84, 77, 60, 55, 48, 49, 42, 34, 34, 36, 36, 78, 54, 54, 45, 89, 54, 168, 90, 122, 69, 92, 60, 126, 72, 53, 42, 47, 45, 58, 54, 57, 51, 43, 36, 47, 45, 37, 36, 41, 36, 54, 48, 48, 42, 28, 34, 32, 36, 71, 51, 78, 51, 70, 51, 35, 33, 35, 33, 34, 33, 158, 87, 148, 81, 227, 117, 138, 72, 26, 33, 42, 39, 54, 46, 49, 42, 42, 36, 66, 50, 62, 48, 39, 33, 62, 48, 67, 53, 111, 64, 64, 48, 65, 49, 64, 49, 44, 48, 49, 48, 220, 127, 65, 54, 89, 57, 101, 66, 72, 51, 44, 39, 42, 39, 44, 39, 301, 153, 411, 215, 567, 291, 203, 117, 126, 72, 122, 66, 92, 57, 105, 57, 77, 51, 53, 42, 167, 93, 115, 63, 157, 78, 66, 51, 42, 39, 44, 39, 146, 84, 118, 57, 113, 69, 62, 45, 25, 30, 69, 57, 116, 79, 110, 63, 63, 54, 63, 54, 65, 54, 261, 131, 273, 142, 165, 102, 35, 39, 33, 39, 155, 93, 32, 36, 33, 36, 34, 36, 29, 33, 25, 31, 89, 56, 107, 63, 425, 219, 415, 214, 95, 61, 42, 43, 52, 46, 32, 33, 33, 36, 31, 36, 27, 33, 51, 46, 62, 60, 53, 48, 55, 51, 62, 60, 66, 42, 30, 30, 69, 51, 78, 50, 42, 43, 38, 36, 47, 41, 57, 43, 110, 73, 56, 42, 100, 60, 102, 60, 24, 30, 23, 30, 78, 56, 42, 39, 45, 45, 50, 45, 50, 45, 47, 45, 47, 45, 120, 61, 104, 63, 71, 51, 78, 51, 80, 54, 97, 57, 91, 57, 63, 54, 63, 54, 64, 54, 64, 54, 64, 54, 72, 57, 72, 57, 73, 57, 73, 57, 73, 57, 75, 60, 73, 60, 73, 60, 74, 60, 73, 60, 82, 63, 65, 51, 103, 69, 98, 60, 62, 45, 64, 51, 169, 96, 81, 51, 46, 46, 78, 56, 155, 95, 33, 36, 176, 93, 158, 87, 172, 90, 44, 37, 77, 54, 67, 51, 50, 45, 32, 36, 34, 36, 54, 45, 49, 42, 86, 54, 85, 54, 88, 54, 25, 30, 40, 42, 22, 30, 47, 39, 55, 44, 57, 44, 64, 50, 72, 50, 45, 41, 50, 39, 44, 39, 65, 45, 98, 65, 81, 62, 375, 200, 414, 218, 554, 287, 376, 200, 72, 51, 219, 127, 209, 122, 375, 200, 182, 110, 218, 129, 210, 125, 213, 130, 210, 126, 202, 122, 215, 134, 560, 303, 559, 303, 570, 309, 202, 118, 219, 124, 216, 123, 400, 218, 402, 218, 401, 218, 198, 116, 215, 122, 214, 122, 381, 209, 141, 87, 108, 69, 37, 38, 45, 42, 476, 240, 487, 244, 409, 194, 24, 30, 110, 73, 76, 52, 216, 122, 186, 110, 184, 110, 183, 110, 212, 122, 212, 122, 369, 202, 231, 134, 403, 224, 219, 128, 433, 225, 433, 225, 433, 225, 433, 225, 392, 209, 272, 151, 265, 157, 71, 51, 243, 144, 235, 140, 405, 209, 218, 122, 357, 193, 202, 117, 206, 118, 105, 64, 109, 64, 127, 79, 103, 64, 80, 51, 65, 45, 352, 192, 219, 134, 204, 122, 360, 198, 198, 116, 215, 122, 209, 122, 208, 122, 85, 60, 366, 199, 210, 125, 214, 125, 50, 40, 21, 30, 21, 30, 21, 30, 21, 30, 21, 30, 21, 30, 21, 30, 21, 30, 21, 30, 21, 30, 22, 30, 23, 30, 25, 30, 376, 200, 190, 110, 373, 199, 213, 125, 293, 161, 223, 128, 17, 27, 211, 122, 211, 122, 354, 193, 204, 119, 244, 137, 367, 198, 627, 317, 77, 57, 390, 203, 720, 364, 198, 116, 196, 27, 194, 27, 56, 42, 363, 27, 185, 111, 185, 111, 183, 110, 206, 121, 196, 116, 489, 247, 339, 175, 562, 262, 548, 259, 557, 265, 480, 250, 161, 96, 48, 42, 97, 65, 50, 42, 115, 78, 94, 69, 83, 62, 44, 39, 38, 36, 129, 78, 136, 81, 120, 72, 47, 42, 50, 42, 50, 39, 39, 39, 42, 39, 41, 39, 41, 39, 127, 84, 47, 42, 96, 57, 61, 54, 103, 69, 133, 77, 105, 75, 52, 45, 46, 42, 47, 42, 47, 42, 47, 42, 76, 51, 56, 45, 32, 36, 96, 66, 53, 42, 106, 66, 87, 60, 64, 48, 60, 48, 55, 45, 57, 48, 57, 48, 60, 48, 102, 65, 151, 81, 96, 60, 325, 192, 330, 177, 33, 39, 149, 81, 73, 54, 378, 213, 174, 117, 178, 117, 430, 243, 316, 189, 267, 150, 102, 66, 100, 66, 99, 69, 97, 69, 70, 56, 89, 63, 94, 69, 136, 89, 139, 89, 82, 55, 85, 55, 113, 65, 111, 73, 139, 92, 125, 80, 128, 80, 146, 82, 85, 62, 105, 74, 81, 54, 36, 38, 58, 44, 135, 78, 143, 95, 140, 84, 139, 81, 202, 111, 134, 81, 89, 60, 102, 66, 50, 39, 55, 45, 139, 92, 146, 97, 150, 97, 151, 97, 118, 77, 55, 47, 62, 50, 197, 108, 197, 120, 212, 120, 29, 35, 41, 39, 136, 92, 58, 48, 58, 48, 58, 48, 58, 48, 35, 36, 41, 42, 42, 42, 41, 42, 34, 39, 31, 36, 32, 36, 31, 36, 46, 42, 47, 42, 46, 42, 34, 39, 34, 36, 34, 36, 34, 36, 34, 36, 34, 39, 37, 35, 76, 57, 48, 39, 110, 74, 47, 39, 110, 74, 44, 39, 26, 33, 29, 33, 32, 32, 44, 39, 40, 39, 34, 39, 38, 39, 47, 44, 47, 42, 35, 39, 35, 39, 37, 39, 36, 39, 38, 39, 95, 60, 107, 71, 81, 60, 119, 69, 64, 45, 47, 42, 36, 39, 61, 48, 44, 39, 408, 215, 407, 215, 229, 129, 192, 116, 403, 224, 400, 212, 220, 126, 220, 126, 190, 115, 196, 118, 174, 102, 83, 57, 100, 61, 46, 45, 47, 45, 38, 39, 189, 107, 200, 119, 192, 116, 100, 65, 101, 65, 101, 65, 56, 48, 259, 133, 391, 185, 709, 349, 430, 221, 132, 80, 455, 226, 27, 36, 34, 36, 45, 38, 267, 143, 62, 48, 110, 66, 57, 45, 353, 193, 393, 209, 111, 68, 70, 51, 35, 22638, 30, 25, 29, 25, 23, 22, 22, 25, 279, 171, 76, 53, 76, 59, 93, 62, 87, 47, 87, 50, 96, 61, 209, 108, 195, 102, 112, 59, 191, 105, 193, 108, 193, 102, 70, 53, 66, 47, 207, 102, 98, 57, 94, 57, 181, 88, 220, 114, 83, 52, 102, 67, 177, 88, 77, 59, 111, 65, 130, 65, 17, 23, 125, 70, 72, 41, 87, 53, 99, 53, 97, 53, 161, 82, 195, 106, 88, 54, 149, 80, 98, 60, 25, 26, 261, 110, 141, 90, 118, 64, 34, 29, 279, 142, 224, 121, 145, 62, 31, 32, 161, 77, 136, 76, 103, 61, 109, 64, 105, 61, 111, 64, 89, 50, 130, 72, 130, 72, 130, 72, 130, 72, 130, 72, 130, 72, 130, 72, 130, 72, 130, 72, 111, 57, 110, 57, 111, 57, 111, 57, 111, 57, 111, 57, 111, 57, 111, 57, 111, 57, 111, 57, 174, 87, 65, 38, 121, 62, 62, 38, 53, 40, 147, 93, 70, 44, 160, 82, 83, 58, 218, 114, 82, 61, 98, 64, 98, 64, 88, 61, 86, 61, 266, 133, 95, 61, 153, 82, 155, 85, 37, 32, 82, 61, 67, 47, 24, 26, 182, 97, 71, 47, 87, 47, 214, 123, 170, 85, 87, 61, 81, 58, 83, 58, 81, 58, 88, 61, 69, 41, 86, 58, 81, 61, 87, 58, 99, 64, 94, 50, 103, 59, 86, 44, 325, 158, 84, 52, 82, 41, 335, 151, 298, 139, 179, 94, 170, 85, 60, 41, 172, 100, 240, 132, 31, 29, 182, 91, 171, 85, 140, 72, 161, 87, 141, 67, 101, 58, 67, 41, 166, 82, 60, 41, 39, 32, 31, 29, 44, 35, 31, 29, 32, 29, 27, 29, 66, 47, 49, 41, 32, 32, 34, 32, 53, 41, 48, 38, 87, 50, 85, 50, 88, 50, 122, 70, 102, 64, 108, 64, 155, 87, 93, 53, 101, 64, 109, 64, 102, 64, 104, 64, 169, 96, 111, 67, 99, 62, 98, 53, 80, 47, 79, 47, 72, 47, 72, 47, 79, 47, 109, 63, 211, 109, 104, 62, 25, 26, 79, 53, 74, 1455579, 2529385, 3254079, 3712153, 3464555, 712499, 364070, 26409, 29359, 33941, 5777419, 3536, 1789, 17, 21, 181112, 160206, 216325, 107480, 1482, 758, 15181, 17443, 11334, 6298, 23, 2071, 46127, 22958, 100051, 102002, 11341, 5869, 58801, 29833, 76773, 59014, 18568, 856792, 7042, 84492, 11054, 5672, 11349, 54804, 6943, 3503, 13712, 6832, 2518, 1266, 89792]
        for item in self.frametree.tree.selection():
            self.context(item)
            chtresult = []
            aitem = bs.insertvalue(text=f"EN").citem
            bitem = bs.insertvalue(text=f"CHT").citem
            for size in sizes:
                with by.readsliceseek0(size):
                    列表1 = by.readuint8seek0(4)
                    列表3 = by.readuint8seek0(5)
                # 用字符串，判断相等出了问题 ,改用列表
                if 列表1 == [8,2,69,78]: 
                    bs.insertblock(item=aitem, text=f"块_{size}", bp=by.readslice(size).bp)
                if 列表3 == [8,3,67,72,84]: 
                    chtresult.append(by.readsliceseek0(size).bp)
                    bs.insertblock(item=bitem, text=f"块_{size}", bp=by.readslice(size).bp)
                if 列表1 != [8,2,69,78] and 列表3 != [8,3,67,72,84]:
                    bs.insertblock(text=f"块_{size}", bp=by.readslice(size).bp)
            chtresult.append(by.readremainsliceseek0().bp)
            bs.insertblock(text=f"余块_{by.remainsize()}", bp=by.readremainslice().bp)

            f = open("name.txt", "w", encoding="UTF-8")
            for bp in chtresult:
                jsonbinfile = 文件.jsonbin.类(bp)
                for datatype, result in jsonbinfile.type_result_list:
                    if datatype == 8: f.write(f"{result}\n")
            f.close()
            print("文件写入完成")

    def find826978(self):
        for item in self.frametree.tree.selection():
            self.context(item)
            with by.copy():
                sizes = self.__find__8__2__69__78__()
                print(sizes)
            for size in sizes:
                bs.insertblock(text=f"块_{size}", bp=by.readslice(size).bp)
            bs.insertblock(text=f"余块_{by.remainsize()}", bp=by.readremainslice().bp)


    def __find__8__2__69__78__(self):
        indexs = [0]
        while True:
            if by.remainsize() < 16: break
            uint8 = by.readuint8()
            if uint8 == 8:
                列表1 = by.readuint8seek0(3)
                # 列表2 = by.readuint8seek0(3)
                列表3 = by.readuint8seek0(4)

                if 列表1 == [2,69,78]: indexs.append(by.tell()-1)   # EN
                # if 列表1 == [2,69,78]: indexs.append(by.tell()-1)   # EN
                if 列表3 == [3,67,72,84]: indexs.append(by.tell()-1)   # CHT 
                 

        sizes = []
        for i in range(len(indexs)-1):
            size = indexs[i+1] - indexs[i]
            sizes.append(size)
        return sizes





    def 文件分块0(self):
        for item in self.frametree.tree.selection():
            self.context(item)
            bs.insertblock(text=f"Head_28", bp=by.readslice(28).bp)

            while True:
                if by.remainsize() < 54927968: break
                datatype = by.readuint8()
                if datatype == 11: 
                    with bs.insertvalue(text=f"11"): 
                        self.__json__node__()
                else:
                    break


            # with bs.insertvalue(text=f"块_json_", values=by.readuint8seek0(5)): 
            #     self.__json__node__()            
            bs.insertblock(text=f"余块_{by.remainsize()}", bp=by.readremainslice().bp)

    def __json__node__(self):
        # bs.insertblock(text=f"", bp=by.readslice(4).bp)
        num = by.readuint8seek0()
        bs.insertblock(text=f"", bp=by.readslice(1).bp)
        bs.insertblock(text=f"", bp=by.readslice(3).bp)
        if num > 0:
            for i in range(num):
                datatype, bp = self.__json__type__()
                if datatype == 11:
                    with bs.insertvalue(text=f""):
                        self.__json__node__()
                else:
                    bs.insertblock(text=f"{datatype}_", bp=bp)
            bs.insertblock(text=f"", bp=by.readslice(1).bp)


        while True:
            if by.remainsize() < 16: break
            datatype1, bp1 = self.__json__type__()
            if datatype1 == 8 :
                chars = bp1.readutf8(bp1.readuint8())
                datatype2, bp2 = self.__json__type__()
                if datatype2 == 11:
                    with bs.insertvalue(text=f"{chars}"): 
                        self.__json__node__()
                else:
                    bs.insertblock(text=f"{chars}", bp=bp2)
            else:
                bs.insertblock(text=f"{datatype1}_", bp=bp1)

            datatype3 = by.readuint8seek0()
            if datatype3 == 11: return []
            if datatype3 >  11: return []
        

    def __json__type__(self):
        tell = by.tell()
        datatype = by.readuint8()
        match datatype:
            case  0: bp = by.readslice(0).bp            
            case  1: bp = by.readslice(0).bp   
            case  2: bp = by.readslice(0).bp              
            case  3: bp = by.readslice(1).bp   
            case  4: bp = by.readslice(2).bp     
            case  5: bp = by.readslice(4).bp 
            case  6: bp = None     
            case  7: bp = by.readslice(8).bp 
            case  8: bp = by.readslice(by.readuint8seek0()+1).bp     
            case  9: bp = None
            case 10: bp = None   
            case 11: bp = None               
        if bp == None and datatype != 11: print(datatype, by.readuint8seek0(8), tell)
        return datatype, bp


    # 64947968
    def find11(self):
        for item in self.frametree.tree.selection():
            self.context(item)
            with by.readsliceseek0(64947):
                sizes = self.__find__110000__()
            for size in sizes:
                bs.insertblock(text=f"块_{size}", bp=by.readslice(size).bp)
            bs.insertblock(text=f"余块_{by.remainsize()}", bp=by.readremainslice().bp)


    def __find__110000__(self):
        indexs = [0]
        while True:
            if by.remainsize() < 16: break
            uint8 = by.readuint8()
            if uint8 == 11:
                列表 = by.readuint8seek0(4)
                if 列表 == [0,0,0,0] or 列表 == [3,0,0,0]: indexs.append(by.tell()-1)    

        sizes = []
        for i in range(len(indexs)-1):
            size = indexs[i+1] - indexs[i]
            sizes.append(size)
        return sizes
    # def __type11__struct__(self):
    #     datatype = by.readuint8()




    # def __type8__utf8__(self):
    #     pass





            # bs.insertblock(text=f"PK67_20", bp=by.readslice(20).bp)
            # bs.insertblock(text=f"PK66_56", bp=by.readslice(56).bp)
            # with bs.insertvalue(text=f"PK12"):
            #     count = 0
            #     while True:
            #         count += 1
            #         size = self.findPK12()
            #         if size == 0: break
            #         bs.insertblock(text=f"{count}_PK12_{size}", bp=by.readslice(size).bp)

            # aitem = bs.insertvalue(text=f"PK78").citem
            # bitem = bs.insertvalue(text=f"块表").citem
            # citem = bs.insertvalue(text=f"PK34").citem
            # count = 0
            # while True:
            #     count += 1
            #     if by.remainsize() < 16: break
            #     bp = by.readsliceseek0(16).bp
            #     flag, some, size = bp.readuint8(4), bp.readuint8(4), bp.readuint32()
            #     bs.insertblock(item=aitem, text=f"{count}_PK78_16", bp=by.readslice(16).bp)
            #     bs.insertblock(item=bitem, text=f"{count}_块_{size}", bp=by.readslice(size).bp)
            #     size = self.findPK34()
            #     if size == 0: break
            #     bs.insertblock(item=citem, text=f"{count}_PK34_{size}", bp=by.readslice(size).bp)



            # bs.insertblock(text=f"余块_{by.remainsize()}", bp=by.readremainslice().bp)




    def PK66分块(self):
        for item in self.frametree.tree.selection():
            self.context(item, self.frametree.bpdict[item].copy())
            bs.insertblock(text=f"flag_4", bp=by.readslice(4).bp)
            bs.insertblock(text=f"size_4", bp=by.readslice(4).bp)
            bs.insertblock(text=f"some_16", bp=by.readslice(16).bp)
            num = by.readuint32seek0()
            bs.insertblock(text=f"numpk12_{num}_8", bp=by.readslice(8).bp)
            num = by.readuint32seek0()
            bs.insertblock(text=f"numpk78_{num}_8", bp=by.readslice(8).bp)
            size = by.readuint32seek0()
            bs.insertblock(text=f"sizepk12_{size}_8", bp=by.readslice(8).bp)
            size = by.readuint32seek0()
            bs.insertblock(text=f"sizepk12_{size}_8", bp=by.readslice(8).bp)
            bs.insertblock(text=f"余下_{by.remainsize()}", bp=by.readremainslice().bp)


    def findPK12(self):
        size = 0
        bp = by.readsliceseek0(60).bp
        if bp.readuint8(4) == [80, 75, 1, 2]: size = 60

        bp = by.readsliceseek0(61).bp
        if bp.readuint8(4) == [80, 75, 1, 2]: size = 61

        bp = by.readsliceseek0(62).bp
        if bp.readuint8(4) == [80, 75, 1, 2]: size = 62

        bp = by.readsliceseek0(63).bp
        if bp.readuint8(4) == [80, 75, 1, 2]: size = 63
        return size



    def findPK34(self):
        size = 0

        bp = by.readsliceseek0(48).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 48

        bp = by.readsliceseek0(62).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 62

        bp = by.readsliceseek0(72).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 72

        bp = by.readsliceseek0(80).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 80

        bp = by.readsliceseek0(96).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 96

        bp = by.readsliceseek0(100).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 100


        bp = by.readsliceseek0(112).bp
        if bp.readuint8(4) == [80, 75, 3, 4]: size = 112

        return size




    def 文件分块0(self):
        for item in self.frametree.tree.selection():
            self.context(item)
            indexs = [
                0 , 
                171314 , 
                171330 ,
                217472 , 
                217488 ,
                218816 ,
                218832 ,
                628544 , 
                628560 ,
                631232 ,
                631248 ,
                634432 , 
                634448 ,
                2993856 , 
                2993872 ,
                2997056 ,
                2997072 ,
                5356480 , 
                5356496 ,
                5359680 ,
                5359696 ,
                7719104 , 
                7719120 ,
                7722304 ,
                7722320 ,
                10081728 , 
                10081744 ,
                10084928 ,
                10084944 ,
                10088128 ,
                10088144 ,
                10090816 , 
                10090832 ,
                10094016 ,
                10094032 ,
                19531328 , 
                19531344 ,
                19543744 , 
                19543760 ,
                28981056 , 
                28981072 ,
                28984256 ,
                28984272 ,
                28987456 ,
                28987472 ,
                28990656 , 
                28990672 ,
                31350080 , 
                31350096 ,
                31353280 ,
                31353296 ,
                33712704 , 
                33712720 ,
                33715392 ,
                33715408 ,
                33718592 , 
                33718608 ,
                36078016 , 
                36078032 ,
                36081216 ,
                36081232 ,
                38440640 , 
                38440656 ,
                38443840 ,
                38443856 ,
                38447040 ,
                38447056 ,
                38450240 , 
                38450256 ,
                47887552 , 
                47887568 ,
                47899968 , 
                47899984 ,
            ]
            sizes = [indexs[i+1]-indexs[i] for i in range(len(indexs)-1)]
            sizes = [ size for size in sizes if size > 0 ]
            for size in sizes: bs.insertblock(text=f"{by.readuint8seek0(4)}_{size}", bp=by.readslice(size).bp)
            bs.insertblock(text="余下", bp=by.readremainslice().bp)
